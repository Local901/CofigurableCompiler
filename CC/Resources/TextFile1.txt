<Compiler name="C_compiler">
	<Compiler.Tokens>
		<Token Pattern="\("		Key="open_parentases"/>
		<Token Pattern="\)"		Key="close_parentases"/>
		<Token Pattern="{"		Key="open_brace"/>
		<Token Pattern="}"		Key="close_brace"/>

		<Token Pattern=";"		Key="semicolon"/>

		<Token Pattern="[a-zA-Z]\w*"	Key="identifier">
			<Token Pattern="int"	Key="keyword_int"/>
			<Token Pattern="return" Key="keyword_return"/>
		<Token/>
		<Token Pattern="[0-9]+"			Key="integer_literal"/>
	<Compiler.Tokens/>


	<Compiler.Constructs>
		
		<Construct Key="return_integer">
			<Filter key="keyword_return"/>
			<Filter Key="integer_literal" name="integer_value"/>
			<Filter Key="semicolon"/>
		<Construct/>

		<Construct key="function_construct">
			<Construct.Specifiers>
				<Specifier key="main_function">
					<Condition Name="function_name" Path="Value" Value="main"/>
				<Specifier/>
			<Construct.Specifiers/>

			<Filter Key="keyword_int" Name="Type"/>
			<Filter Key="identifier" Name="function_name"/>
			<Filter Key="open_brace"/>

			<Filter Key="return_integer" Name="content"/>
			
			<Filter Key="close_brace"/>
		<Construct/>
	<Compiler.Constructs/>

	<Compiler.Output>
		<Output Key"__program__">
			<Text Text="  .global { main_function.function_name }"/>
			<Content/>
		<Output/>

		<Output Key="function_construct">
			<Text Text="{ function_name }:"/>
			<Content/>
		<Output/>

		<Output Key="return_integer">
			<Text Text="  movl	${ integer_value }, %eax"/>
			<Text Text="  ret"/>
		<Output/>
	<Compiler.Output/>

<Compiler/>